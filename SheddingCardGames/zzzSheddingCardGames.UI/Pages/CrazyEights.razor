@page "/crazyeights"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime JsRuntime;

<h1>Crazy Eights</h1>
<div id="theCanvas" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas Width="300" Height="400" @ref="canvasReference"></BECanvas>
</div>

@code {
    BECanvasComponent canvasReference;
    Canvas2DContext outputCanvasContext;

    protected override async Task OnInitializedAsync()
    {
        await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));

        await base.OnInitializedAsync();
    }

    //[JSInvokable]
    //public async ValueTask GameLoop(float timeStamp)
    //{
    //    await _outputCanvasContext.ClearRectAsync(0, 0, 300, 400);

    //    await _outputCanvasContext.SetFillStyleAsync("green");
    //    await _outputCanvasContext.FillRectAsync(10, 50, 300, 100);

    //    await _outputCanvasContext.SetFontAsync("24px verdana");
    //    await _outputCanvasContext.StrokeTextAsync($"time: {timeStamp}", 20, 80);
    //}

    //private Turn currentTurn;
    //private Game game;

    //protected override async Task OnInitializedAsync()
    //{
    //    IDeckBuilder deckBuilder;
    //    deckBuilder = new MinimalDeckBuilder();
    //    //deckBuilder = new DeckBuilder();

    //    var gameBuilder = new CrazyEightsGameBuilder();
    //    game = gameBuilder.Build(deckBuilder.Build());

    //    currentTurn = game.GetCurrentTurn();
    //    //currentTurn = await Init();

    //    //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    //}
}
