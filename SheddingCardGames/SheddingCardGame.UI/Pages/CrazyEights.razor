@page "/"
@using SheddingCardGames
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Drawing
@using Blazor.Extensions.Canvas.Model
@using SheddingCardGames.Domain
@using SheddingCardGames.UiLogic
@using Action = SheddingCardGames.Domain.Action

@inject IJSRuntime JsRuntime;
<h1>Crazy Eights</h1>

<img @ref="cardsSpriteSheet" hidden src="assets/Cards.png" />

<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas Width="1200" Height="800" @ref="canvas"></BECanvas>
</div>

@code {
    BECanvasComponent canvas = null;
    Canvas2DContext context;
    ElementReference cardsSpriteSheet;

    private BlazorGameController gameController;
    private CardCollection deck;
    readonly GameTime gameTime = new GameTime();
    IGameObject gameObjectMouseDown;

    private int screenWidth = 1200;
    private int screenHeight = 800;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            context = await canvas.CreateCanvas2DAsync();
            await context.SetTextBaselineAsync(TextBaseline.Top);

            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));

            IDeckBuilder deckBuilder;
            deckBuilder = new SpecificDeckBuilder(
                new CardCollection(new Card(8, Suit.Hearts), new Card(1, Suit.Clubs), new Card(2, Suit.Clubs), new Card(3, Suit.Clubs), new Card(4, Suit.Clubs), new Card(5, Suit.Clubs), new Card(6, Suit.Clubs), new Card(7, Suit.Clubs)),
                new CardCollection(new Card(8, Suit.Spades), new Card(1, Suit.Diamonds), new Card(2, Suit.Diamonds), new Card(3, Suit.Diamonds), new Card(4, Suit.Diamonds), new Card(5, Suit.Diamonds), new Card(6, Suit.Diamonds), new Card(7, Suit.Diamonds)),
                new Card(1, Suit.Hearts),
                new CardCollection(new Card(1, Suit.Spades))
            );

            //deckBuilder = new MinimalDeckBuilder();
            //deckBuilder = new DeckBuilder();
            deck = deckBuilder.Build();

            var game = new CrazyEightsGameBuilder().Build(deck);
            //var game = new SpecificGameBuilder(). Build(deck);

            var config = new Config();
            var inGameUiBuilder = new InGameUiBuilder(config, context, cardsSpriteSheet);
            gameController = new BlazorGameController(inGameUiBuilder, game, new ActionResultMessageMapper());
            gameController.UiState = new NewUiBuilder(config, gameController).BuildNewUiState();
        }
    }

    private async ValueTask Update(int screenWidth, int screenHeight)
    {
        var uiState = gameController.UiState;

        if (gameObjectMouseDown != null)
        {
            if (InputSystem.Instance.GetButtonState(MouseButtons.Left) == ButtonStates.Up)
            {
                if (gameObjectMouseDown.IsHit(InputSystem.Instance.MouseCoords))
                {
                    await gameObjectMouseDown.Update(new InputState(true, InputSystem.Instance.MouseCoords));
                    gameObjectMouseDown = null;
                }
            }
        }
        else
        {
            foreach (var gameObject in uiState.GameObjects.Where(x => x.IsVisible))
            {
                await gameObject.Update(new InputState(false, InputSystem.Instance.MouseCoords));
            }

            if (InputSystem.Instance.GetButtonState(MouseButtons.Left) == ButtonStates.Down)
            {
                foreach (var gameObject in uiState.GameObjects.Where(x => x.IsVisible))
                {
                    if (gameObject.IsHit(InputSystem.Instance.MouseCoords))
                    {
                        gameObjectMouseDown = gameObject;
                    }
                }
            }
        }

        if (gameController.UiState.CurrentGamePhase == GamePhase.New)
            return;

        var currentBoard = gameController.UiState.CurrentBoard;

        var cardWidth = 154;
        var cardHeight = 240;

        var player2LabelY = 10;
        var player2HandY = player2LabelY + 30;
        var discardPileY = player2HandY + cardHeight;
        var player1HandY = discardPileY + cardHeight;
        var player1LabelY = player1HandY + cardHeight;

        // Update Cards
        var discardCard = gameController.UiState.CurrentBoard.DiscardPile.CardToMatch;
        var discardCardGameObject = uiState.CardGameObjects[discardCard];
        discardCardGameObject.IsTurnedUp = true;
        discardCardGameObject.SetX(cardWidth);
        discardCardGameObject.SetY(discardPileY);
        discardCardGameObject.IsVisible = true;

        var stockPileCard = currentBoard.StockPile.Cards.First();
        var stockPileGameObject = uiState.CardGameObjects[stockPileCard];
        stockPileGameObject.OnClick = () => gameController.Take();
        stockPileGameObject.IsTurnedUp = false;
        stockPileGameObject.SetX(0);
        stockPileGameObject.SetY(discardPileY);
        stockPileGameObject.IsVisible = true;

        for (int i = 0; i < currentBoard.Player1.Hand.Cards.Count(); i++)
        {
            var card = currentBoard.Player1.Hand.Cards.ElementAt(i);
            var x = i * cardWidth;
            var cardObject = uiState.CardGameObjects[card];
            cardObject.IsTurnedUp = true;
            cardObject.SetX(x);
            cardObject.SetY(player1HandY);
            cardObject.IsVisible = true;
        }

        for (int i = 0; i < currentBoard.Player2.Hand.Cards.Count(); i++)
        {
            var card = currentBoard.Player2.Hand.Cards.ElementAt(i);
            var x = i * cardWidth;
            var cardObject = uiState.CardGameObjects[card];
            cardObject.IsTurnedUp = true;
            cardObject.SetX(x);
            cardObject.SetY(player2HandY);
            cardObject.IsVisible = true;
        }

        // Update Buttons
        if (gameController.CurrentTurn.NextAction == Action.SelectSuit)
        {
            gameController.Buttons[ButtonNames.Clubs].Show();
            gameController.Buttons[ButtonNames.Diamonds].Show();
            gameController.Buttons[ButtonNames.Hearts].Show();
            gameController.Buttons[ButtonNames.Spades].Show();
        }
        else
        {
            gameController.Buttons[ButtonNames.Clubs].Hide();
            gameController.Buttons[ButtonNames.Diamonds].Hide();
            gameController.Buttons[ButtonNames.Hearts].Hide();
            gameController.Buttons[ButtonNames.Spades].Hide();
        }

        // Update Labels
        gameController.Labels[LabelNames.Turn].Show($"Turn {gameController.CurrentTurn.TurnNumber}");

        var playerToPlayLabel = gameController.Labels[LabelNames.PlayerToPlay];
        if (gameController.CurrentTurn.HasWinner)
        {
            playerToPlayLabel.Show($"Player {gameController.CurrentTurn.Winner} has won!");
            return;
        }

        playerToPlayLabel.Label = $"Player {gameController.CurrentTurn.PlayerToPlay} to {gameController.CurrentTurn.NextAction}";

        var takeButton = gameController.Buttons[ButtonNames.Take];

        if (gameController.CurrentTurn.NextAction == Action.Take)
            takeButton.Show();
        else
            takeButton.Hide();


        var selectedSuitLabel = gameController.Labels[LabelNames.SelectedSuit];

        if (gameController.CurrentTurn.SelectedSuit == null)
            selectedSuitLabel.Hide();
        else
            selectedSuitLabel.Show($"Selected Suit: {gameController.CurrentTurn.SelectedSuit}");

        var invalidPlayLabel = gameController.Labels[LabelNames.InvalidPlay];
        if (uiState.HasError)
            invalidPlayLabel.Show(uiState.ErrorMessage);
        else
            invalidPlayLabel.Hide();
    }

    private async ValueTask Render(int screenWidth, int screenHeight)
    {
        await context.SetFillStyleAsync("green");
        await context.FillRectAsync(0, 0, screenWidth, screenHeight);

        foreach (var visibleGameObject in gameController.UiState.GameObjects.Where(x => x.IsVisible))
            await visibleGameObject.Render(context);

    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp)
    {
        gameTime.TotalTime = timeStamp;

        await Update(screenWidth, screenHeight);
        await Render(screenWidth, screenHeight);
    }

    [JSInvokable]
    public async ValueTask OnMouseMove(int mouseX, int mouseY)
    {
        InputSystem.Instance.MouseCoords.X = mouseX;
        InputSystem.Instance.MouseCoords.Y = mouseY;
    }

    [JSInvokable]
    public async ValueTask OnMouseDown(MouseButtons button)
    {
        InputSystem.Instance.SetButtonState(button, ButtonStates.Down);
    }

    [JSInvokable]
    public async ValueTask OnMouseUp(MouseButtons button)
    {
        InputSystem.Instance.SetButtonState(button, ButtonStates.Up);
    }
}
