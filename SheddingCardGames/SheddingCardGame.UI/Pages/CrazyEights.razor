@page "/"
@using SheddingCardGames
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Drawing
@using Blazor.Extensions.Canvas.Model
@using Action = SheddingCardGames.Action

@inject IJSRuntime JsRuntime;
<h1>Crazy Eights</h1>

<img @ref="cardsSpriteSheet" hidden src="assets/Cards.png" />

<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas Width="1200" Height="800" @ref="canvas"></BECanvas>
</div>

@code {
    BECanvasComponent canvas = null;
    Canvas2DContext context;
    ElementReference cardsSpriteSheet;

    private GameController gameController;
    private CardCollection deck;
    readonly GameTime gameTime = new GameTime();
    IGameObject gameObjectMouseDown;

    private int screenWidth = 1200;
    private int screenHeight = 800;

    private UiState uiState;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            context = await canvas.CreateCanvas2DAsync();
            await context.SetTextBaselineAsync(TextBaseline.Top);

            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));

            IDeckBuilder deckBuilder;
            deckBuilder = new SpecificDeckBuilder(
                new CardCollection(new Card(8, Suit.Clubs), new Card(1, Suit.Clubs), new Card(2, Suit.Clubs), new Card(3, Suit.Clubs), new Card(4, Suit.Clubs), new Card(5, Suit.Clubs), new Card(6, Suit.Clubs), new Card(7, Suit.Clubs)),
                new CardCollection(new Card(8, Suit.Diamonds), new Card(1, Suit.Diamonds), new Card(2, Suit.Diamonds), new Card(3, Suit.Diamonds), new Card(4, Suit.Diamonds), new Card(5, Suit.Diamonds), new Card(6, Suit.Diamonds), new Card(7, Suit.Diamonds)),
                new Card(1, Suit.Hearts),
                new CardCollection(new Card(1, Suit.Spades))
            );


            //deckBuilder = new MinimalDeckBuilder();
            //deckBuilder = new DeckBuilder();
            deck = deckBuilder.Build();

            //var gameBuilder = new CrazyEightsGameBuilder();
            //var game = gameBuilder.Build(deck);
            var game = BuildSpecificGame(deck);
            gameController = new GameController(this, game);

            uiState = new NewUiBuilder(gameController, screenWidth, screenHeight).BuildNewUiState();
        }
    }

    public class DummyShuffler: IShuffler
    {
        public IEnumerable<Card> Shuffle(IEnumerable<Card> cards)
        {
            return cards;
        }
    }


    public Game BuildSpecificGame(CardCollection deck)
    {
        var players = new[] { new Player(1), new Player(2) };
        var rules = new Rules();
        var shuffler = new DummyShuffler();
        var game = new Game(rules, shuffler, players);
        var boardBuilder = new BoardBuilder(rules, shuffler);
        var board = boardBuilder.Build(deck, players);

        var random = new Random();
        var firstPlayer = random.Next(2) + 1;
        game.Setup(board, firstPlayer);

        return game;

    }

    public async ValueTask Deal()
    {
        await SetupGameUi();
    }

    private async ValueTask SetupGameUi()
    {
        var uiBuilder = new InGameUiBuilder(gameController, context, cardsSpriteSheet);

        uiState = await uiBuilder.Build(deck);
    }

    public void Play(IGameObject gameObject)
    {
        cardTaken = null;
        isInvalidTake = false;

        // Bring to top
        uiState.GameObjects.Remove(gameObject);
        uiState.GameObjects.Add(gameObject);
    }

    public void Take(Card takenCard)
    {
        uiState.CardGameObjects[takenCard].Tag = $"{takenCard}";

        isInvalidTake = false;
        cardTaken = takenCard;
    }

    private bool isInvalidTake;
    private Card cardTaken = null;

    public void InvalidTake()
    {
        isInvalidTake = true;
    }

    private async ValueTask Update(int screenWidth, int screenHeight)
    {
        if (gameObjectMouseDown != null)
        {
            if (InputSystem.Instance.GetButtonState(MouseButtons.Left) == ButtonStates.Up)
            {
                if (gameObjectMouseDown.IsHit(InputSystem.Instance.MouseCoords))
                {
                    await gameObjectMouseDown.Update(new InputState(true, InputSystem.Instance.MouseCoords));
                    gameObjectMouseDown = null;
                }
            }
        }
        else
        {
            foreach (var gameObject in uiState.GameObjects.Where(x => x.IsVisible))
            {
                await gameObject.Update(new InputState(false, InputSystem.Instance.MouseCoords));
            }

            if (InputSystem.Instance.GetButtonState(MouseButtons.Left) == ButtonStates.Down)
            {
                foreach (var gameObject in uiState.GameObjects.Where(x => x.IsVisible))
                {
                    if (gameObject.IsHit(InputSystem.Instance.MouseCoords))
                    {
                        gameObjectMouseDown = gameObject;
                    }
                }
            }
        }

        if (gameController.CurrentGamePhase == GamePhase.New)
            return;

        var cardWidth = 154;
        var cardHeight = 240;

        var player2LabelY = 10;
        var player2HandY = player2LabelY + 30;
        var discardPileY = player2HandY + cardHeight;
        var player1HandY = discardPileY + cardHeight;
        var player1LabelY = player1HandY + cardHeight;

        // Update Cards
        var discardCard = gameController.CurrentTurn.DiscardPile.CardToMatch;
        var discardCardGameObject = uiState.CardGameObjects[discardCard];
        discardCardGameObject.IsTurnedUp = true;
        discardCardGameObject.SetX(cardWidth);
        discardCardGameObject.SetY(discardPileY);
        discardCardGameObject.IsVisible = true;

        var stockPileCard = gameController.CurrentTurn.StockPile.First();
        var stockPileGameObject = uiState.CardGameObjects[stockPileCard];
        stockPileGameObject.Tag = "StockPile";
        stockPileGameObject.IsTurnedUp = false;
        stockPileGameObject.SetX(0);
        stockPileGameObject.SetY(discardPileY);
        stockPileGameObject.IsVisible = true;

        for (int i = 0; i < gameController.CurrentTurn.Player1Hand.Cards.Count(); i++)
        {
            var card = gameController.CurrentTurn.Player1Hand.Cards.ElementAt(i);
            var x = i * cardWidth;
            var cardObject = uiState.CardGameObjects[card];
            cardObject .IsTurnedUp = true;
            cardObject .SetX(x);
            cardObject .SetY(player1HandY);
            cardObject.IsVisible = true;
        }

        for (int i = 0; i < gameController.CurrentTurn.Player2Hand.Cards.Count(); i++)
        {
            var card = gameController.CurrentTurn.Player2Hand.Cards.ElementAt(i);
            var x = i * cardWidth;
            var cardObject = uiState.CardGameObjects[card];
            cardObject .IsTurnedUp = true;
            cardObject .SetX(x);
            cardObject .SetY(player2HandY);
            cardObject.IsVisible = true;
        }

        // Update Labels
        uiState.TurnLabel.Label = $"Turn {gameController.CurrentTurn.TurnNumber}";

        if (gameController.CurrentTurn.HasWinner)
        {
            uiState.PlayerToPlayLabel.Label = $"Player {gameController.CurrentTurn.Winner} has won!";
            return;
        }

        uiState.PlayerToPlayLabel.Label = $"Player {gameController.CurrentTurn.PlayerToPlay} to {gameController.CurrentTurn.NextAction}";

        if (gameController.CurrentTurn.NextAction == Action.Take)
            uiState.TakeButton.IsVisible = true;
        else
            uiState.TakeButton.IsVisible = false;

        if (gameController.CurrentTurn.NextAction == Action.SelectSuit)
        {
            uiState.ClubsButton.IsVisible = true;
            uiState.DiamondsButton.IsVisible = true;
            uiState.HeartsButton.IsVisible = true;
            uiState.SpadesButton.IsVisible = true;
        }
        else
        {
            uiState.ClubsButton.IsVisible = false;
            uiState.DiamondsButton.IsVisible = false;
            uiState.HeartsButton.IsVisible = false;
            uiState.SpadesButton.IsVisible = false;
        }

        if (gameController.CurrentTurn.SelectedSuit == null)
        {
            uiState.SelectedSuitLabel.IsVisible = false;
        }
        else
        {
            uiState.SelectedSuitLabel.Label = $"Selected Suit: {gameController.CurrentTurn.SelectedSuit}";
            uiState.SelectedSuitLabel.IsVisible = true;
        }

        // Display invalid Play messages
        if (gameController.InvalidPlayCard != null)
        {
            uiState.InvalidPlayLabel.IsVisible = true;
            uiState.InvalidPlayLabel.Label = $"You cannot play the Card: {gameController.InvalidPlayCard.Card}";
        }
        else if (isInvalidTake)
        {
            uiState.InvalidPlayLabel.IsVisible = true;
            uiState.InvalidPlayLabel.Label = $"You cannot Take a Card at this time";
        }
        else
        {
            uiState.InvalidPlayLabel.IsVisible = false;
        }

    }

    private async ValueTask Render(int screenWidth, int screenHeight)
    {
        await context.SetFillStyleAsync("green");
        await context.FillRectAsync(0, 0, screenWidth, screenHeight);

        foreach (var gameObject in uiState.GameObjects)
        {
            if (gameObject.IsVisible)
                await gameObject.Render(context);
        }
    }



    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp)
    {
        gameTime.TotalTime = timeStamp;


        await Update(screenWidth, screenHeight);
        await Render(screenWidth, screenHeight);
    }

    [JSInvokable]
    public async ValueTask OnMouseMove(int mouseX, int mouseY)
    {
        InputSystem.Instance.MouseCoords.X = mouseX;
        InputSystem.Instance.MouseCoords.Y = mouseY;
    }

    [JSInvokable]
    public async ValueTask OnMouseDown(MouseButtons button)
    {
        InputSystem.Instance.SetButtonState(button, ButtonStates.Down);
    }

    [JSInvokable]
    public async ValueTask OnMouseUp(MouseButtons button)
    {
        InputSystem.Instance.SetButtonState(button, ButtonStates.Up);
    }

}
